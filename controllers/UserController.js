import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import { validationResult } from "express-validator";
import UserModel from "../models/User.js";
import { generateEmailToken } from "../utils/emailToken.js";
import { sendConfirmationEmail } from "../utils/mailer.js";

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const register = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json(errors.array());
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await UserModel.findOne({ email: req.body.email });
    if (existingUser) {
      return res.status(400).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
      });
    }
    const existingUserByFullName = await UserModel.findOne({
      fullName: req.body.fullName,
    });
    if (existingUserByFullName) {
      return res.status(400).json({
        message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ",
      });
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    const passwordRegex = /^(?=.*\d).{8,}$/; // –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã
    if (!passwordRegex.test(req.body.password)) {
      return res.status(400).json({
        message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã.",
      });
    }

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const { email, password, firstName, lastName, fullName, avatarUrl } =
      req.body;
    const salt = await bcrypt.genSalt(10);
    const Hash = await bcrypt.hash(password, salt);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const doc = new UserModel({
      email: req.body.email,
      lastName: req.body.lastName,
      firstName: req.body.firstName,
      fullName: req.body.fullName,
      avatarUrl: req.body.avatarUrl,
      passwordHash: Hash, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Hash
      isVerified: false,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const user = await doc.save();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    const emailToken = generateEmailToken(user._id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    // await sendConfirmationEmail(email, emailToken);

    const token = jwt.sign(
      { userId: user._id }, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ userId –≤–º–µ—Å—Ç–æ id
      process.env.JWT_SECRET,
      { expiresIn: "60d" }
    );

    console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", token);
    const { passwordHash, ...userData } = user._doc;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
    res.json({
      ...userData,
      token,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
    });
  }
};
//–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞
export const login = async (req, res) => {
  try {
    const user = await UserModel.findOne({ email: req.body.email });

    if (!user) {
      return res.status(404).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
      });
    }

    const isValidPass = await bcrypt.compare(
      req.body.password,
      user._doc.passwordHash
    );
    if (!user.isVerified) {
      return res.status(403).json({
        message: "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.",
      });
    }
    if (!isValidPass) {
      return res.status(400).json({
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
      });
    }

    const token = jwt.sign(
      {
        _id: user._id,
      },
      process.env.JWT_SECRET,
      {
        expiresIn: "60d",
      }
    );

    const { passwordHash, ...userData } = user._doc;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
    res.json({
      ...userData,
      token,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è",
    });
  }
};
export const getMe = async (req, res) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º req.user.id, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω middleware checkAuth
    const user = await UserModel.findById(req.userId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º req.userId // üü¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ req.user.id

    if (!user) {
      return res.status(404).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    const { passwordHash, ...userData } = user._doc;
    res.json(userData); // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ passwordHash
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ getMe:", err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    });
  }
};
export const verifyEmail = async (req, res) => {
  try {
    const { token } = req.params;
    const decoded = jwt.verify(token, process.env.EMAIL_SECRET);

    // 1. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const user = await UserModel.findById(decoded.userId);
    if (!user) {
      return res.redirect(
        `${process.env.CLIENT_URL}/login?error=user_not_found`
      );
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
    if (user.isVerified) {
      return res.redirect(`${process.env.CLIENT_URL}/login?verified=already`);
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    user.isVerified = true;
    await user.save();

    // 4. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —É—Å–ø–µ—Ö–∞
    res.redirect(`${process.env.CLIENT_URL}/login?verified=true`);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", err.message);
    res.redirect(`${process.env.CLIENT_URL}/login?error=invalid_token`);
  }
};
