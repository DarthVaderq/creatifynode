import express from "express";
import Project from "../models/Card.js";
import checkAuth from "../utils/checkAuth.js";
import mongoose from "mongoose";
import { uploadWithBody } from "../middleware/upload.js";
const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
router.get("/", async (req, res) => {
  try {
    const { category } = req.query; // ‚úÖ –£–±–∏—Ä–∞–µ–º userId –∏–∑ query
    const userId = req.userId; // ‚úÖ –ë–µ—Ä–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞

    const filter = category ? { category } : {};
    const projects = await Project.find(filter).populate(
      "user",
      "fullName username"
    );

    const projectsWithLiked = projects.map((project) => ({
      ...project.toObject(),
      liked: userId ? project.likedBy.includes(userId) : false,
    }));

    res.json(projectsWithLiked);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:", err);
    res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã" });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ ID
router.get("/:id", async (req, res) => {
  try {
    const project = await Project.findById(req.params.id).populate(
      "user",
      "fullName"
    );
    if (!project) {
      return res.status(404).json({ message: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    console.log("–û—Ç–≤–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞:", project);
    res.json(project);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞" });
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
router.post("/", checkAuth, uploadWithBody, async (req, res) => {
  try {
    const { title, description, category } = req.body;

    if (!title || !description) {
      return res.status(400).json({
        message: "–ü–æ–ª—è 'title' –∏ 'description' —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.",
      });
    }

 
    const uploadedFiles = req.files || [];
    const mediaPaths = uploadedFiles.map((file) => `/uploads/${file.filename}`);


    const categories = category ? [category] : [];
    console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", uploadedFiles);
    console.log("–ú–µ–¥–∏–∞-–ø—É—Ç–∏:", mediaPaths);
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ middleware:", req.user);

    const newProject = new Project({
      title,
      description,
      images: mediaPaths, // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ "media" –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –Ω–æ —Ç–æ–≥–¥–∞ –º–µ–Ω—è–π –∏ –≤ –º–æ–¥–µ–ª–∏
      user: req.userId,
      category: categories,
    });

    await newProject.save();
    res.status(201).json(newProject);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", err);
    res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç" });
  }
});
router.delete("/:id", checkAuth, async (req, res) => {
  try {
    const project = await Project.findOneAndDelete({
      _id: req.params.id,
      user: req.userId,
    });

    if (!project) {
      return res.status(404).json({ message: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–∞—à" });
    }

    res.json({ message: "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", err);
    res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç" });
  }
});

// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø—Ä–æ–µ–∫—Ç—É
router.patch("/:id/like", checkAuth, async (req, res) => {
  try {
    const userId = req.userId;
    const projectId = req.params.id;

    if (!mongoose.Types.ObjectId.isValid(projectId)) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞" });
    }

    const project = await Project.findById(projectId);
    if (!project) {
      return res.status(404).json({ message: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const hasLiked = project.likedBy.includes(userId);
    if (hasLiked) {
      project.likes -= 1;
      project.likedBy.pull(userId);
    } else {
      project.likes += 1;
      project.likedBy.push(userId);
    }

    await project.save();
    const updatedProject = await Project.findById(projectId).populate(
      "user",
      "username"
    );

    res.json(updatedProject); // üí• –í–æ—Ç –∑–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤:", err);
    res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–π–∫" });
  }
});

export default router;
