// bot.js
import dotenv from "dotenv";
dotenv.config();

import axios from "axios";
import { Telegraf } from "telegraf";
import mongoose from "mongoose";
import User from "../models/User.js";

console.log("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:", process.env.TELEGRAM_BOT_TOKEN);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç index.js)
mongoose
  .connect(process.env.MONGO_URI, {
    serverSelectionTimeoutMS: 30000,
  })
  .then(() => console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ"))
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err);
    process.exit(1);
  });

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

bot.on("text", async (ctx) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", ctx.message.text);

  const message = ctx.message.text;
  const userId = ctx.from.id;

  const nameMatch = message.match(/–ò–º—è:\s*(.+)/i);
  const lastNameMatch = message.match(/–§–∞–º–∏–ª–∏—è:\s*(.+)/i);
  const emailMatch = message.match(/Email:\s*(.+)/i);
  const passwordMatch = message.match(/–ü–∞—Ä–æ–ª—å:\s*(.+)/i);

  if (nameMatch && lastNameMatch && emailMatch && passwordMatch) {
    try {
      const password = passwordMatch[1].trim();

      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      const bcrypt = await import("bcrypt");
      const passwordHash = await bcrypt.hash(password, 10);
      console.log("–•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", passwordHash);

      const updatedUser = await User.findOneAndUpdate(
        { telegramId: userId },
        {
          $set: {
            firstName: nameMatch[1].trim(),
            lastName: lastNameMatch[1].trim(),
            fullName: `${nameMatch[1].trim()} ${lastNameMatch[1].trim()}`,
            email: emailMatch[1].trim(),
            passwordHash,
          },
        },
        { upsert: true, new: true, setDefaultsOnInsert: true }
      );

      console.log("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", updatedUser);

      await axios.post(
        `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
        {
          chat_id: userId,
          text: `‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\nüåê –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://creatifytech.online/login\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–∞–π—Ç–µ Creatify.`,
        }
      );
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } else {
    ctx.reply(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ò–º—è: ...\n–§–∞–º–∏–ª–∏—è: ...\nEmail: ...\n–ü–∞—Ä–æ–ª—å: ..."
    );
  }
});


export default bot;
